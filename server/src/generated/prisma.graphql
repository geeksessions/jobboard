# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Oportunity implements Node {
  id: ID!
  raw: String!
  links: [String!]
  poster(where: PosterWhereInput): Poster!
}

type Poster implements Node {
  id: ID!
  name: String!
}


#
# Other Types
#

type AggregateOportunity {
  count: Int!
}

type AggregatePoster {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createOportunity(data: OportunityCreateInput!): Oportunity!
  createPoster(data: PosterCreateInput!): Poster!
  updateOportunity(data: OportunityUpdateInput!, where: OportunityWhereUniqueInput!): Oportunity
  updatePoster(data: PosterUpdateInput!, where: PosterWhereUniqueInput!): Poster
  deleteOportunity(where: OportunityWhereUniqueInput!): Oportunity
  deletePoster(where: PosterWhereUniqueInput!): Poster
  upsertOportunity(where: OportunityWhereUniqueInput!, create: OportunityCreateInput!, update: OportunityUpdateInput!): Oportunity!
  upsertPoster(where: PosterWhereUniqueInput!, create: PosterCreateInput!, update: PosterUpdateInput!): Poster!
  updateManyOportunities(data: OportunityUpdateInput!, where: OportunityWhereInput!): BatchPayload!
  updateManyPosters(data: PosterUpdateInput!, where: PosterWhereInput!): BatchPayload!
  deleteManyOportunities(where: OportunityWhereInput!): BatchPayload!
  deleteManyPosters(where: PosterWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type OportunityConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [OportunityEdge]!
  aggregate: AggregateOportunity!
}

input OportunityCreateInput {
  raw: String!
  links: OportunityCreatelinksInput
  poster: PosterCreateOneInput!
}

input OportunityCreatelinksInput {
  set: [String!]
}

"""
An edge in a connection.
"""
type OportunityEdge {
  """
  The item at the end of the edge.
  """
  node: Oportunity!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OportunityOrderByInput {
  id_ASC
  id_DESC
  raw_ASC
  raw_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OportunityPreviousValues {
  id: ID!
  raw: String!
  links: [String!]
}

type OportunitySubscriptionPayload {
  mutation: MutationType!
  node: Oportunity
  updatedFields: [String!]
  previousValues: OportunityPreviousValues
}

input OportunitySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OportunitySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OportunitySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OportunityWhereInput
}

input OportunityUpdateInput {
  raw: String
  links: OportunityUpdatelinksInput
  poster: PosterUpdateOneInput
}

input OportunityUpdatelinksInput {
  set: [String!]
}

input OportunityWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OportunityWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OportunityWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  raw: String
  """
  All values that are not equal to given value.
  """
  raw_not: String
  """
  All values that are contained in given list.
  """
  raw_in: [String!]
  """
  All values that are not contained in given list.
  """
  raw_not_in: [String!]
  """
  All values less than the given value.
  """
  raw_lt: String
  """
  All values less than or equal the given value.
  """
  raw_lte: String
  """
  All values greater than the given value.
  """
  raw_gt: String
  """
  All values greater than or equal the given value.
  """
  raw_gte: String
  """
  All values containing the given string.
  """
  raw_contains: String
  """
  All values not containing the given string.
  """
  raw_not_contains: String
  """
  All values starting with the given string.
  """
  raw_starts_with: String
  """
  All values not starting with the given string.
  """
  raw_not_starts_with: String
  """
  All values ending with the given string.
  """
  raw_ends_with: String
  """
  All values not ending with the given string.
  """
  raw_not_ends_with: String
  poster: PosterWhereInput
}

input OportunityWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PosterConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PosterEdge]!
  aggregate: AggregatePoster!
}

input PosterCreateInput {
  name: String!
}

input PosterCreateOneInput {
  create: PosterCreateInput
  connect: PosterWhereUniqueInput
}

"""
An edge in a connection.
"""
type PosterEdge {
  """
  The item at the end of the edge.
  """
  node: Poster!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PosterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PosterPreviousValues {
  id: ID!
  name: String!
}

type PosterSubscriptionPayload {
  mutation: MutationType!
  node: Poster
  updatedFields: [String!]
  previousValues: PosterPreviousValues
}

input PosterSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PosterSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PosterSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PosterWhereInput
}

input PosterUpdateDataInput {
  name: String
}

input PosterUpdateInput {
  name: String
}

input PosterUpdateOneInput {
  create: PosterCreateInput
  connect: PosterWhereUniqueInput
  delete: Boolean
  update: PosterUpdateDataInput
  upsert: PosterUpsertNestedInput
}

input PosterUpsertNestedInput {
  update: PosterUpdateDataInput!
  create: PosterCreateInput!
}

input PosterWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PosterWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PosterWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
}

input PosterWhereUniqueInput {
  id: ID
}

type Query {
  oportunities(where: OportunityWhereInput, orderBy: OportunityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Oportunity]!
  posters(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poster]!
  oportunity(where: OportunityWhereUniqueInput!): Oportunity
  poster(where: PosterWhereUniqueInput!): Poster
  oportunitiesConnection(where: OportunityWhereInput, orderBy: OportunityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OportunityConnection!
  postersConnection(where: PosterWhereInput, orderBy: PosterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PosterConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  oportunity(where: OportunitySubscriptionWhereInput): OportunitySubscriptionPayload
  poster(where: PosterSubscriptionWhereInput): PosterSubscriptionPayload
}
